몽고 DB 설치 {
mongodb.com 의 Community Server 

위 사이트의 products 목록에서 Community Server 로 들어가서 다운로드 받으면 됨. 5.0.6(current) 버전 받으면 됨.

다운받은거 우클릭 하고 호환성  next , accept, next , 체크박스가 선택된 상태에서 next 를 누르고 back 하고 
체크박스 해제 하고 next (그 다음 체크박스는 체크 된채로 next) 그냥 계속 next 하면 됨.
중간에 뭐 뜨는거 ignore 


내pc 우클릭 속성 - 고급시스템설정 - 환경변수 - 편집 - 시스템변수에서 path 를 찾아서 클릭 - 그 안에서 편집눌러서 
다음 주소 복붙  C:\Program Files\MongoDB\Server\5.0\bin

커맨드창에 mongo 쳐서 버전 나오면 된것.

c에 myMongoDB 폴더 생성
다른 cmd 창 띄워서 mongod --dbpath c:/myMongoDB
그리고 ctrl+f 로 localhost 찾아야함. 
엔터 한번 치고 아래 검색
compass 창에서 mongodb://localhost/   }

mongo 
use bitDB
로 다시 아까 작업하던고에서 작업가능


몽고디비란?

응용프로그램을 쉽게 개발하고 확장할 수 있도록 고안된 document 데티어베이스

mongoDB document 는 JSON 객체와 유사하다. 
{ 
   name : "conan" ,       <- field : value
   age : 10, 
   status : "S", 
   group : ["case", "sports"]
}

document 사용의 장점.  <- row / tuple 이랑 비슷한 느낌이라고 받아들이면 된다..?
프로그래밍 언어의 자료형에 해당함 
테이블 조인의 필요성 감소
동적 스키마는 다형성을 지원함.

collection 은 테이블

> 이건 명령어를 받아들일 준비가 되어있다는 의미

명령어			설명
db			현재 선택된 데이터베이스를 출력
show dbs			데이터베이스 목록을 출력
use <데이터베이스명>	기존의 데이터베이스를 선택 또는 새로운 데이터베이스를 생성
insertOne / insertMany	컬렉션에 docment를 삽입, 컬렉션이 존재하지 않으면 생성 후 삽입
			ex) db.컬렉션이름.insertOne()
find			컬렉션에 저장된 모든 docment를 조회하거나 특정 조건에 맞는 doc를 조회하거나 컬렉션의
			특정 컬럼들을 반환    ex) db.컬렉션이름.find() 




--movies에 데이터 2개 삽입
db.movies.insertMany([
{ 
title: 'Titanic',
year: 1997,
awards : {
win : 127,
nominations : 63,
text : 'Won 11 Oscars. Another 116 wins & 63 nominations.'
},
cast : ['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates']
},
{ 
title:'The Dark Knight',
year:2008,
awards : {
win : 144,
nominations : 106,
text : 'Won 2 Oscars. Another 142 wins & 106 nominations.'
},
cast : ['Christian Bale', 'Heath Ledger', 'Aaron Eckhart', 'Michael Caine'],
directors : ['Christopher Nolan']
}
])

--위에 내가 친거는 안됨.. ㅠ 아래껄로함 근데 진짜 뭐가 없는거지 , 을 쳐야하는데 . 을 쳐놨음.. 아오
db.movies.insertMany([
{
title:'Titanic',
year:1997,
awards:{
   wins:127,
   nominations:63,
   text:'Won 11 oscars. Another 116 wins & 63 nominations.'
   },
   cast:['Leonardo Dicaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates']
},
{
title:'The Dark Knight',
year:2008,
awards:{
   wins:144,
   nominations:106,
   text:'Won 2 oscars. Another 142 wins & 106 nominations.'
   },
   cast:['Christian Bale', 'Heath Ledger', 'Aaron Eckhart', 'Michael Caine'],
   directors:['Christopher Nolan']
}
])

db.movies.insertOne({"title111":"aaa"})
db.movies.insertOne({"title222":"bbb"})

--아래와 같은 방법으로 insert 도 가능하다.
movie = {"title123" : "Star Wars",
	"directer123" : "George",
	"year" : 1977 }
db.movies.insertOne(movie)

db.movies.find().pretty()

db.movies.find({"year" : {$in : [1997, 1998] }}).pretty()
db.movies.find( { "awards.wins" : {$gt: 100 }}).pretty()

db.movies.find( {}, { "title" : 1 , "directors" : 1 , "year" : 1 } );
db.movies.find( {}, { "_id" : 0 , "title" : 1 , "genres" : 1 } );


-- Binary Json = BSON 

명시적으로 생성하는 방법 - db.createCollection(name,options) 

db.createCollection("log", {capped : true, size : 5242880, max : 5000})

db.log.drop()

방향키 위키 누르면 그간 한 명령어가 그대로 복사된다.. 오..


document 는 필드(field),(key)  와 값(value) 의 쌍으로 구성되어있다.


db.movies.drop() 

db.movies.insertMany ([ {"title" : "Ghostbusters"},
			{"title" : "E.T"},
			{"title" : "Blade Runner"}]);

db.movies.find()

db.movies.insertMany([
	{"_id" : 0 , "title" : "Top Gun"},
	{"_id" : 1 , "title" : "Back to"},
	{"_id" : 1 , "title" : "Gremlins"},
	{"_id" : 2 , "title" : "Aliens"}])


db.movies.insertMany([
	{"_id" : 6 , "title" : "Park"},
	{"_id" : 7 , "title" : "Seong"},
	{"_id" : 7 , "title" : "Bin"},
	{"_id" : 8 , "title" : "Yeah"}],
	{"ordered" : false} )



server 실행 
(mongod --dbpath c:/myMongoDB 이런식으로? )

db.inventory.insertOne (
	{ item : "canvas" , 
	 qty : 100 ,
	tags : ["cotton"] ,
	size : { h : 20 , w:30, uom: "cm" } 
	 }
)

db.inventory.find({item : "canvas"})

db.inventory.insertMany([
{item : "note" , qty : 25, tags : ["blank","red"], size : { h : 14, w : 21, uom : "cm"} },
{item : "mat" , qty : 85, tags : ["gray"], size : { h : 28, w : 36, uom : "cm"} },
{item : "mousepad" , qty : 25, tags : ["gel","blue"], size : { h : 19, w : 23, uom : "cm"} }
])

db.inventory.drop()

db.inventory.insertMany([
{item : "journal" , qty : 25, size : { h : 14, w : 21, uom : "cm" }, status : "A" },
{item : "notebook" , qty : 50, size : { h : 9, w : 11, uom : "in"} , status : "A" },
{item : "paper" , qty : 100, size : { h : 9, w : 11, uom : "in"} , status : "D" },
{item : "planner" , qty : 75, size : { h : 23, w : 30, uom : "cm" }, status : "D" },
{item : "postcard" , qty : 45, size : { h : 10, w : 16, uom : "cm"} , status : "A" }
])

db.inventory.find( { status : "D" } )  //이거 왜 안되지? 흠.. 

db.inventory.find( {status: {$in: ["A", "D"] } } )

db.inventory.find({status:"A", qty:{ $lt : 30} })

db.inventory.find( { $or : [ { status: "A"}, {qty : {$lt : 30 } } ] } ) 

db.inventory.find( { status : "A", $or:[ { qty : { $lt:30} }, {item : /^p/} ] } )
( sql에서는 select * from inventory       where status = "A" AND (qty < 30 OR item LIKE "p%"  이렇게 표현가능하다.)

db.inventory.find( { size : { h : 14, w : 21, uom : "cm" }})

db.inventory.find( {"size.uom":"in"})

db.inventory.find( {"size.h" : {$lt:15} } )

db.inventory.find( {"size.h" : {$lt:15}, "size.uom":"in",status:"D" } )


db.inventory.insertMany([
{item : "note" , qty : 25, tags : ["blank","red"], dim_cm[14,21] },
{item : "mat" , qty : 85, tags : ["gray"], size : { h : 28, w : 36, uom : "cm"} },
{item : "mousepad" , qty : 25, tags : ["gel","blue"], size : { h : 19, w : 23, uom : "cm"} }
])

db.inventory.drop()

db.inventory.insertMany([
{item : "journal" , qty : 25, tags : ["blank","red"], dim_cm : [14,21] },
{item : "notebook" , qty : 50, tags : ["red","blank"], dim_cm: [14,21]},
{item : "paper" , qty : 100, tags : ["red","blank","plain"], dim_cm:[14,21]},
{item : "planner" , qty : 75, tags : ["blank","red"], dim_cm:[23,30] },
{item : "postcard" , qty : 45, tags : ["blue"], dim_cm:[10,15]}
])

db.inventory.find( {tags : ["red","blank"]} )

--순서도 상관없고 다른게 있어도 상관없이 값을 포함하고있는 모든 요소들 조회 하려면 $all
db.inventory.find( {dim_cm : {$gt:25}})

--조건 여러개
db.inventory.find( { dim_cm : {$elemMatch : {$gt : 22, $lt : 30 } } } )

--배열 인덱스(인덱스는 0부터 시작함)
db. inventory.find( { "dim_cm.1" : {$gt : 20}})

--배열의 길이
db. inventory.find( {"tags" : {$size : 3 }} )


db.inventory.drop()
--내장 도큐먼트가 배열로 있는 경우
db.inventory.insertMany([
{item : "journal" , instock:[ { warehouse : "A", qty : 5} , {warehouse : "C", qty : 15 } ] } ,
{item : "notebook" , instock:[ { warehouse : "C", qty : 5} ] } ,
{item : "paper" ,  instock:[ { warehouse : "A", qty : 60} , {warehouse : "B", qty : 15 } ] } ,
{item : "planner" , instock:[ { warehouse : "A", qty : 40} , {warehouse : "B", qty : 5 } ] } ,
{item : "postcard" , instock:[ { warehouse : "B", qty : 15} , {warehouse : "C", qty : 35 } ] } 
])

db.inventory.find( { "instock" : {warehouse: "A" , qty : 5 }} )

-- $lte ( less than equal) 
db.inventory.find( {'instock.qty' : {$lte:20 }} ) 

db.inventory.find( {'instock.0.qty' : {$lte:20 }} ) .pretty()

db.inventory.find( {'instock' : {$elemMatch : {qty : {$gt : 10, $lte : 20 }}}} )


db.inventory.drop()

db.inventory.insertMany([
{item : "journal" , status : "A"  , size : { h : 14, w : 21, uom : "cm" }, instock:[ { warehouse : "A", qty : 5}  ] } ,
{item : "notebook" , status : "A" , size : { h : 9, w : 11, uom : "in"} , instock:[ { warehouse : "C", qty : 5} ] } ,
{item : "paper" , status : "D"  ,  size : { h : 9, w : 11, uom : "in"} , instock:[ { warehouse : "A", qty : 60} ] } ,
{item : "planner" , status : "D" , size : { h : 23, w : 30, uom : "cm" }, instock:[ { warehouse : "A", qty : 40} ] } ,
{item : "postcard" , status : "A" , size : { h : 10, w : 16, uom : "cm"} , instock:[ { warehouse : "B", qty : 15}  , {warehouse : "C", qty : 35 } ] } 
])

db.inventory.find( {status : "A"}, {item : 1 , status : 1 } )

db.inventory.find( { "status" : "A" } , { status : 0 , instock : 0 } ) 

db.inventory.find ( {status : "A" }, {item: 1, status : 1 , "size.uom" : 1 } )

db.inventory.find ( {status: "A" } , {"size.uom" : 0 } )

db.inventory.find ( {status : "A" }, {item: 1, status : 1 , "instock.qty" : 1 } )

db.inventory.drop()

db.inventory.insertMany( [
{ item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
{ item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
{ item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
{ item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
{ item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
{ item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
{ item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
{ item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
{ item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
{ item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] );

db.inventory.insertMany([ { _id:1, item : null } , { _id:2 } ])
db.inventory.find( {item:null} )		-- 이러면 둘다 나옴
db.inventory.find( {item: {$exists:false } } )	-- 이러면 2 만 나옴


db.inventory.updateOne(
 {item : "paper"} ,
 { 
 $set : {"size.uom":"cm",status:"p" },
 $currentDate : { lastModified : true } 
} )

db.inventory.replaceOne(
  {item:"paper"},
  {item:"paper", instock : [ {warehouse : "A", qty:60}, {warehouse : "B", qty:40} ] } 
)

db.movies.deleteMany({"year":"1984"})



var joe = db.users.findOne({"name" : "joe"});

joe.ralationships = {"friends": joe.friends, "enemies" : joe.enemies};

joe.username = joe.name;

delete joe.friends;

delete joe.enemies;

delete joe.name;

db.users.replaceOne({"name":"joe"} , joe);

db.users.find().pretty()

joe = db.users.findOne({"name":"joe","age":20 } );

db.users.replaceOne({"_id":ObjectId("62061ddaaef58821d9d46e3c")},joe)







.

