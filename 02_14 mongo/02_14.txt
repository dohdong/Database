1. cmd 창을 켜서 mongod --dbpath c:/myMongoDB 를 먼저 하고 서버가 잘 열려서 돌아가는지 확인을 하고,
2. 다른 cmd 창을 켜서 mongo 를 쳐서  >  (저거 하나만 딱 떠서 입력이 가능하게 되어야함. 
3. compass 는 mongodb://localhost/ 를 쳐서 쓰던 창을 띄울 수 있음.
4. 이후 cmd 창에 use bitDB 로 전에 쓰던 DB. 
5. insert 를 해야 compass 에 만든 폴더가 뜬다.


제대로 종료하는 법 
use admin
db.shutdownServer() 


	SQL 				vs		 MongoDB

select * from samples   			. 		db.samples.find()
select id user_id, status From samples		.		db.samples.find( {}, {user_id : 1 , status : 1} )
 ( -> 위가 프로젝션이라고 하는데 프로젝션이 뭐지? ) 

약어 : gt(greater than) , lt(less than) 

--정규식 표현.
select * from samples			. 		db.samples.find( { user_id :  /bc/ } ) or 
where user_id like "%bc%"  			.		db.samples.find( { user_id : {$regex : /bc? } } )

조회 하는 것을 효율적으로 하기 위해서는 index 를 활용하는 방법도 있다.

--update 
update samples SET status = "C"		. 		db.samples.updateMany( {age : { $gt: 25 } },
WHERE age > 25				.		{ $set : { status : "C" } } )




오늘은 인덱싱을 할 예정이다~ 

먼저 데이터 생성
for ( i = 0 ; i < 500000 ; i++) {
	db.user.insert( {
	  "userid" : i ,
	  "name" : "user"+i,
	  "age" : Math.floor(Math.random()*100 ),
	  "score" : Math.floor(Math.random()*100 ),
	  "time" : new Date() 
	});
}

몽고DB 인덱스. 
-DB의 검색을 빠르게 하기 위하여 데이터의 순서를 미리 정해두는 과정.
-index 는 한 쿼리에 한 개의 index 만 유효함
-write 작업이 주된 작업일 경우 오히려 느려질 수 있음. 읽기 작업 위주의 경우에 유용하다.

_id 인덱스. ( 기본키 역할을 함, 제거 할 수 없음.)


--인덱스 생성.
db.collection.createIndex( <key and index type specification>, <options> )

db.user.createIndex( { score : 1 } )   -- 여기서 1로하면 오름차순, -1 로하면 내림차순이다.

--인덱스 정보를 출력하는 함수.
db.user.getIndexes()  

--인덱스 삭제
db.user.dropIndex("score_1")

--인덱스 유무 속도 비교
db.user.find( {score:"23" }).explain("executionStats").executionStats.executionTimeMillis
인덱스가 없을때는 242 였는데 인덱스 만드니까 4 걸림 ㄷ..

db.user.find( { "name" : "user101" } ).explain("executionStats")
db.user.createIndex( { name : 1 } )
db.user.find( { "name" : "user499999" } ).explain("executionStats")

db.user.createIndex( {userid : 1, score: -1} )

--연습
db.user.find( { userid:20300 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( { score : 53 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( { userid : { $gt:3333} } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( { userid:11111 } ).sort( { score : 1 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( { userid:{$gt: 1222} , score : {$gt:22}, age : 22 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( {userid:{$gt: 1222}, score: {$gt:22}, age : 23 } ).explain("executionStats").executionStats.executionTimeMillis

252
257
260
265
264
264	

db.user.createIndex( { userid : 1 } ) 
db.user.createIndex( { score : 1 } ) 
db.user.createIndex( { age : 1 } ) 
처음 2개는 단일로 만들면 되고, 그 밑에는 복합으로 만들어야한다..? 근데 필요없이 그냥 0 으로 나오는것같은데.
db.user.createIndex( {userid : 1, score: -1} )
db.user.createIndex( {userid : 1, score: -1, age: -1} )


------------------
db.user.find( { userid:1222 , score : {$gt:22}, age : 22 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( { userid:2222, score: {$gt:22}, age : 22 } ).explain("executionStats").executionStats.executionTimeMillis
이거일때는 데이터가 없으니까 0인데.
1
9
0
0
1
0

---------------------
db.user.find( { userid : { $gt:3333} } ).explain("executionStats").executionStats.executionTimeMillis

db.user.find( { userid:{$gt: 1222} , score : {$gt:22}, age : 22 } ).explain("executionStats").executionStats.executionTimeMillis
db.user.find( {userid:{$gt: 1222}, score: {$gt:22}, age : 23 } ).explain("executionStats").executionStats.executionTimeMillis
1
9
586
0
749
740 
이건 뭐지 

db.user.createIndex( { age : 1 } ) 
이거만 있으면 
밑에 2개도 
11
12 가 나온다. ㄷㄷ...
근데 $gt 는 인덱스 만들면 오히려 오래걸림.. 흠.. 
$gt 에서는 효율적이지 않나보다. 260 -> 586 으로 변함.


------------------ 점심 이후 mongodb_박성빈 에서 할거 함. 



이후 

db.library.insert ( 
 [ 
   { _id : 101, name : "Java" , description : "By ABC" } ,
   { _id : 102, name : "MongoDB" , description : "By XYZ" } ,
   { _id : 103, name : "Python" , description : "By ABCD" } ,
   { _id : 104, name : "Engineering" , description : "By ******" } ,
   { _id : 105, name : "Salesforce" , description : "By Salesforce" } 
])

db.library.createIndex( {name:"text" , description : "text" } )

db.library.find().pretty()

--Java 가 있는 도큐먼트 반환
db.library.find( { $text : { $search : "Java" } } )

db.library.find( { $text : { $search : "\"Java\"" } } )



cmd 창  폴더 위로 가기 cd ../  아니면 cd \ .


p195 에 내용 시작. 얘도 마찬가지로 내pc 에서 path에 위치 복붙해줘야함.


mongoimport neighborhoods.json -c neighborhoods

mongoimport restaurants.json -c restaurants


db.neighborhoods.createIndex( { location : "2dsphere" } )

db.restaurants.createIndex( { location : "2dsphere" } )



db.neighborhoods.find( {name: "Clinton" } )   // .count()

db.restaurants.find( { name : "Little Pie Company" } )



db.neighborhoods.findOne ( { geometry : { $geoIntersects : { $geometry : {type : "Point", coordinates : [-73.93414657, 40.82302903 ] } } } } )


var neighborhood = db.neighborhoods.findOne({geometry : { $geoIntersects : { $geometry : {type : "Point", coordinates : [-73.93414657, 40.82302903 ] } } } } )

db.restaurants.find({
	location : {
	$geoWithin : {
	$geometry : neighborhood.geometry } } }, {name:1, _id : 0 } )    // .count()  하면 127개 


db.restaurants.find({
	location : {
	$geoWithin : {
	$centerSphere : [
		[-73.93414657, 40.82302903], 5/3963.2 ] } } } )     //.count()  6175개네

이런거 나중에는 시각화까지 해야함.


mongoimport seoulgeo.json -c seoulgeo

db.seoulgeo.find( { "features.properties.name" : "강남구" } ).count()

db.seoulgeo.find( { "features.properties.name" : "강동구" } ).count()

db.seoulgeo.find( { "features.2.geometry" } ).count() 위도 정보 카운트는 실패... ㅠ

mapshaper 에서 시각화 해봄.



이후 217p
 
echo "Hello, world " > foo.txt
mongofiles put foo.txt
mongofiles list
del foo.txt   //삭제 (교재에는 rm = remove 로 나와있음.)
mongofiles get foo.txt


파워쉘 열어서 python 치고  

import pymongo
import gridfs
client = pymongo.MongoClient()
db = client.test
fs= gridfs.GridFS(db)
file_id = fs.put(b"Hello, WORLD", filename = "foo534.txt")
fs.list()
fs.get(file_id).read()

주피터에서도 되고, 뭐 다 되는듯



.